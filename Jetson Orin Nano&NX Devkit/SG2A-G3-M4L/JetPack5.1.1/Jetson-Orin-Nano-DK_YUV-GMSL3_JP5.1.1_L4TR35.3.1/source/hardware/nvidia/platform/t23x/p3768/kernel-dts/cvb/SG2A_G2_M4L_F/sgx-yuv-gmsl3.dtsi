/*
 * Copyright (c) 2022-2023, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#define CAM0_PWDN	TEGRA234_MAIN_GPIO(H, 6)
#define CAM1_PWDN	TEGRA234_MAIN_GPIO(AC, 0)
#define CAM_I2C_MUX 	TEGRA234_AON_GPIO(CC, 3)

/ {
	tegra-capture-vi  {
		num-channels = <2>;
		ports {
			#address-cells = <1>;
			#size-cells = <0>;
			port@0 {
				reg = <0>;
				mipi_cam_vi_in0: endpoint {
					port-index = <0>;
					bus-width = <2>;
					remote-endpoint = <&mipi_cam_csi_out0>;
				};
			};
			port@1 {
				reg = <1>;
				mipi_cam_vi_in1: endpoint {
					port-index = <2>;
					bus-width = <4>;
					remote-endpoint = <&mipi_cam_csi_out1>;
				};
			};
		};
	};

	host1x@13e00000 {
		nvcsi@15a00000 {
			num-channels = <2>;
			#address-cells = <1>;
			#size-cells = <0>;
			channel@0 {
				reg = <0>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						mipi_cam_csi_in0: endpoint@0 {
							port-index = <0>;
							bus-width = <4>;
							remote-endpoint = <&mipi_cam_out0>;
						};
					};
					port@1 {
						reg = <1>;
						mipi_cam_csi_out0: endpoint@1 {
							remote-endpoint = <&mipi_cam_vi_in0>;
						};
					};
				};
			};
			channel@1 {
				reg = <1>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						mipi_cam_csi_in1: endpoint@2 {
							port-index = <2>;
							bus-width = <4>;
							remote-endpoint = <&mipi_cam_out1>;
						};
					};
					port@1 {
						reg = <1>;
						mipi_cam_csi_out1: endpoint@3 {
							remote-endpoint = <&mipi_cam_vi_in1>;
						};
					};
				};
			};
		};
	};
//cam0没有调试过，cam1可以点亮
	cam_i2cmux {
		i2c@0 {
			sw_mipi_cam0: cam_0@1b {
				compatible = "sensing,sgx-yuv-gmsl3-0";
				/* I2C device address */
				reg = <0x1b>;
				def-addr = <0x1a>;
				/* V4L2 device node location */
				devnode = "video0";

				/* Physical dimensions of sensor */
				physical_w = "15.0";
				physical_h = "12.5";

				sensor_model ="sgx-yuv-gmsl3";

				use_sensor_mode_id = "true";

				mode0 {//mode SENSOR_MODE_1920X1080
					mclk_khz = "24000";
					num_lanes = "4";
					tegra_sinterface = "serial_a";
					phy_mode = "DPHY";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";
					lane_polarity = "6";
					dynamic_pixel_bit_depth = "16";
					csi_pixel_bit_depth = "16";
					mode_type = "yuv";
					pixel_phase = "yuyv";
					
					active_w = "1920";
					active_h = "1080";
					readout_orientation = "0";
					line_length = "1920";
					inherent_gain = "1";
					pix_clk_hz = "150000000";
					serdes_pix_clk_hz = "375000000";

					gain_factor = "10";
					min_gain_val = "0"; /* dB */
					max_gain_val = "300"; /* dB */
					step_gain_val = "3"; /* 0.3 */
					default_gain = "0";
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					framerate_factor = "1000000";
					min_framerate = "30000000";
					max_framerate = "30000000";
					step_framerate = "1";
					default_framerate = "30000000";
					exposure_factor = "1000000";
					min_exp_time = "59"; /*us, 2 lines*/
					max_exp_time = "33333";
					step_exp_time = "1";
					default_exp_time = "33333";/* us */
					embedded_metadata_height = "0";
				};

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						mipi_cam_out0: endpoint {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&mipi_cam_csi_in0>;
						};
					};
				};
			};
		};
		i2c@1 {
			sw_mipi_cam1: cam_1@1c {
				compatible = "sensing,sgx-yuv-gmsl3-1";
				reg = <0x1c>;
				def-addr = <0x1a>;
				devnode = "video1";

				/* Physical dimensions of sensor */
				physical_w = "15.0";
				physical_h = "12.5";

				sensor_model ="sgx-yuv-gmsl3";

				/* Defines number of frames to be dropped by driver internally after applying */
				/* sensor crop settings. Some sensors send corrupt frames after applying */
				/* crop co-ordinates */
				post_crop_frame_drop = "0";

				/* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
				use_decibel_gain = "true";

				/* enable CID_SENSOR_MODE_ID for sensor modes selection */
				use_sensor_mode_id = "true";

				mode0 {/*mode SENSOR_MODE_1920X1080_CROP_30FPS*/
						mclk_khz = "24000";
						num_lanes = "4";
						tegra_sinterface = "serial_c";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";
						lane_polarity = "0";

						active_w = "3840";
						active_h = "2160";
						mode_type = "yuv";
						pixel_phase = "yuyv";
						csi_pixel_bit_depth = "16";
						dynamic_pixel_bit_depth = "16";
						readout_orientation = "0";
						line_length = "3840";
						inherent_gain = "1";
						pix_clk_hz = "150000000";
						serdes_pix_clk_hz = "375000000";
											
						gain_factor = "10";
						min_gain_val = "0"; /* dB */
						max_gain_val = "300"; /* dB */
						step_gain_val = "3"; /* 0.3 */
						default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";
						exposure_factor = "1000000";
						min_exp_time = "59"; /*us, 2 lines*/
						max_exp_time = "33333";
						step_exp_time = "1";
						default_exp_time = "33333";/* us */
						embedded_metadata_height = "0";

					};
				
				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						mipi_cam_out1: endpoint {
							port-index = <2>;
							bus-width = <4>;
							remote-endpoint = <&mipi_cam_csi_in1>;
						};
					};
				};	
//				gmsl-link {
//					src-csi-port = "b";
//					dst-csi-port = "a";
//					serdes-csi-link = "a";
//					csi-mode = "1x4";
//					st-vc = <0>;
//					vc-id = <1>;
//					num-lanes = <4>;
//					streams = "ued-u1","yuv16";
//				};
			};
		};
	};
};

/ {
	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		num_csi_lanes = <4>;
		max_lane_speed = <4000000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vender.
		 */
		modules {
			module0 {
				badge = "cam0_position0";
				position = "position0";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "sgx-yuv-gmsl3 9-001b";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/cam_0@1b";
				};
			};
			module1 {
				badge = "cam1_position1";
				position = "position1";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "sgx-yuv-gmsl3 10-001c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/cam_1@1c";
				};
			};
		};
	};
};
