/*
 * Copyright (c) 2022-2023, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#define CAM0_PWDN	TEGRA234_MAIN_GPIO(H, 6)
#define CAM1_PWDN	TEGRA234_MAIN_GPIO(AC, 0)
#define CAM_I2C_MUX 	TEGRA234_AON_GPIO(CC, 3)

/ {
	tegra-capture-vi  {
		num-channels = <2>;
		ports {
			#address-cells = <1>;
			#size-cells = <0>;
			port@0 {
				reg = <0>;
				mipi_cam_vi_in0: endpoint {
					port-index = <1>;
					bus-width = <2>;
					remote-endpoint = <&mipi_cam_csi_out0>;
				};
			};
			port@1 {
				reg = <1>;
				mipi_cam_vi_in1: endpoint {
					port-index = <2>;
					bus-width = <4>;
					remote-endpoint = <&mipi_cam_csi_out1>;
				};
			};
		};
	};

	host1x@13e00000 {
		nvcsi@15a00000 {
			num-channels = <2>;
			#address-cells = <1>;
			#size-cells = <0>;
			channel@0 {
				reg = <0>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						mipi_cam_csi_in0: endpoint@0 {
							port-index = <1>;
							bus-width = <2>;
							remote-endpoint = <&mipi_cam_out0>;
						};
					};
					port@1 {
						reg = <1>;
						mipi_cam_csi_out0: endpoint@1 {
							remote-endpoint = <&mipi_cam_vi_in0>;
						};
					};
				};
			};
			channel@1 {
				reg = <1>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						mipi_cam_csi_in1: endpoint@2 {
							port-index = <2>;
							bus-width = <4>;
							remote-endpoint = <&mipi_cam_out1>;
						};
					};
					port@1 {
						reg = <1>;
						mipi_cam_csi_out1: endpoint@3 {
							remote-endpoint = <&mipi_cam_vi_in1>;
						};
					};
				};
			};
		};
	};

	cam_i2cmux {
		i2c@0 {
			sw_mipi_cam0: cam_0@20 {
				compatible = "sensing,imx390_0";
				/* I2C device address */
				reg = <0x20>;

				/* V4L2 device node location */
				devnode = "video0";

				/* Physical dimensions of sensor */
				physical_w = "3.680";
				physical_h = "2.760";

				sensor_model = "imx390";

				use_sensor_mode_id = "true";
				
				use_decibel_gain = "true";

				reset-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;

				/**
				* ==== Modes ====
				* A modeX node is required to support v4l2 driver
				* implementation with NVIDIA camera software stack
				*
				* == Signal properties ==
				*
				* phy_mode = "";
				* PHY mode used by the MIPI lanes for this device
				*
				* tegra_sinterface = "";
				* CSI Serial interface connected to tegra
				* Incase of virtual HW devices, use virtual
				* For SW emulated devices, use host
				*
				* pix_clk_hz = "";
				* Sensor pixel clock used for calculations like exposure and framerate
				*
				* readout_orientation = "0";
				* Based on camera module orientation.
				* Only change readout_orientation if you specifically
				* Program a different readout order for this mode
				*
				* lane_polarity
				* Based on the camera connector pin.
				* CSIx_D0 | CSIx_D1 | CSI(X+1)_D0 | CSI(X+1)CSIx_D1
				*    LSB  |   BIT1  |     BIT2    |      MSB
				* if there is a polarity swap on any lane, the bit corrsponding
				* to the lane should be set
				* e.g. polarity swap on CSIx_D0 only -> lane_polarity = "1"; 0001
				* e.g. polarity swap on CSIx_D1 and CSI(X+1)_D0 -> lane_polarity = "6"; 0110
				*
				* == Image format Properties ==
				*
				* active_w = "";
				* Pixel active region width
				*
				* active_h = "";
				* Pixel active region height
				*
				* pixel_t = "";
				* The sensor readout pixel pattern
				*
				* line_length = "";
				* Pixel line length (width) for sensor mode.
				*
				* == Source Control Settings ==
				*
				* Gain factor used to convert fixed point integer to float
				* Gain range [min_gain/gain_factor, max_gain/gain_factor]
				* Gain step [step_gain/gain_factor is the smallest step that can be configured]
				* Default gain [Default gain to be initialized for the control.
				*     use min_gain_val as default for optimal results]
				* Framerate factor used to convert fixed point integer to float
				* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
				* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
				* Default Framerate [Default framerate to be initialized for the control.
				*     use max_framerate to get required performance]
				* Exposure factor used to convert fixed point integer to float
				* For convenience use 1 sec = 1000000us as conversion factor
				* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
				* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
				* Default Exposure Time [Default exposure to be initialized for the control.
				*     Set default exposure based on the default_framerate for optimal exposure settings]
				*
				* gain_factor = ""; (integer factor used for floating to fixed point conversion)
				* min_gain_val = ""; (ceil to integer)
				* max_gain_val = ""; (ceil to integer)
				* step_gain_val = ""; (ceil to integer)
				* default_gain = ""; (ceil to integer)
				* Gain limits for mode
				*
				* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
				* min_exp_time = ""; (ceil to integer)
				* max_exp_time = ""; (ceil to integer)
				* step_exp_time = ""; (ceil to integer)
				* default_exp_time = ""; (ceil to integer)
				* Exposure Time limits for mode (sec)
				*
				* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
				* min_framerate = ""; (ceil to integer)
				* max_framerate = ""; (ceil to integer)
				* step_framerate = ""; (ceil to integer)
				* default_framerate = ""; (ceil to integer)
				* Framerate limits for mode (fps)
				*
				* embedded_metadata_height = "";
				* Sensor embedded metadata height in units of rows.
				* If sensor does not support embedded metadata value should be 0.
				*/
				mode0 { /* IMX390_FHD_NML_SP1L_12_M2_40 */
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_b";
					phy_mode = "DPHY";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";
					lane_polarity = "6";

					active_w = "1920";
					active_h = "1080";
					mode_type = "bayer";
					pixel_phase = "rggb";
					csi_pixel_bit_depth = "12";
					dynamic_pixel_bit_depth = "12";
					readout_orientation = "0";
					line_length = "4400";
					inherent_gain = "1";
					mclk_multiplier = "6.1875";
					pix_clk_hz = "148500000";

					gain_factor = "10";
					min_gain_val = "0"; /* dB */
					max_gain_val = "300"; /* dB */
					step_gain_val = "3"; /* 0.3 */
					default_gain = "0";
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					framerate_factor = "1000000";
					min_framerate = "30000000";
					max_framerate = "30000000";
					step_framerate = "1";
					default_framerate = "30000000";
					exposure_factor = "1000000";
					min_exp_time = "3000"; /*us, 2 lines*/
					max_exp_time = "3000";
					step_exp_time = "1";
					default_exp_time = "3000";/* us */
					embedded_metadata_height = "1";
				};

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						mipi_cam_out0: endpoint {
							port-index = <1>;
							bus-width = <2>;
							remote-endpoint = <&mipi_cam_csi_in0>;
						};
					};
				};
			};
		};
		i2c@1 {
			sw_mipi_cam1: cam_1@20 {
				compatible = "sensing,imx390_1";
				/* I2C device address */
				reg = <0x20>;

				/* V4L2 device node location */
				devnode = "video1";

				/* Physical dimensions of sensor */
				physical_w = "3.680";
				physical_h = "2.760";

				sensor_model = "imx390";
				
				/* Defines number of frames to be dropped by driver internally after applying */
				/* sensor crop settings. Some sensors send corrupt frames after applying */
				/* crop co-ordinates */
				post_crop_frame_drop = "0";
				
				use_decibel_gain = "true";

				use_sensor_mode_id = "true";

				reset-gpios = <&tegra_main_gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;

				mode0 {/*mode SENSOR_MODE_1920X1080_CROP_30FPS*/
						mclk_khz = "24000";
						num_lanes = "4";
						tegra_sinterface = "serial_c";
						phy_mode = "DPHY";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";
						lane_polarity = "0";

						active_w = "1920";
						active_h = "1080";
						mode_type = "bayer";
						pixel_phase = "rggb";
						csi_pixel_bit_depth = "12";
						dynamic_pixel_bit_depth = "12";
						readout_orientation = "0";
						line_length = "2200";
						inherent_gain = "1";
						mclk_multiplier = "6.1875";
						pix_clk_hz = "120000000";
											
						gain_factor = "10";
						min_gain_val = "0"; /* dB */
						max_gain_val = "300"; /* dB */
						step_gain_val = "3"; /* 0.3 */
						default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";
						exposure_factor = "1000000";
						min_exp_time = "59"; /*us, 2 lines*/
						max_exp_time = "33333";
						step_exp_time = "1";
						default_exp_time = "33333";/* us */
						embedded_metadata_height = "1";

					};

				mode1 {/*mode 1920x1080_crop_4lane_hdr_raw12_rggb_30fps*/
						mclk_khz = "24000";
						num_lanes = "4";
						tegra_sinterface = "serial_c";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";
						dynamic_pixel_bit_depth = "20";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer_wdr_pwl";
						pixel_phase = "rggb";

						active_w = "1920";
						active_h = "1080";
						readout_orientation = "0";
						line_length = "2200";
						inherent_gain = "1";
						pix_clk_hz = "120000000";

						gain_factor = "10";
						min_gain_val = "0"; /* dB */
						max_gain_val = "300"; /* dB */
						step_gain_val = "3"; /* 0.3 */
						default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";
						exposure_factor = "1000000";
						min_exp_time = "59"; /*us, 2 lines*/
						max_exp_time = "33333";
						step_exp_time = "1";
						default_exp_time = "33333";/* us */
						embedded_metadata_height = "1";

						/* WDR related settings */
						num_control_point = "9";
						control_point_x_0 = "0";
						control_point_x_1 = "480";
						control_point_x_2 = "1438";
						control_point_x_3 = "4315";
						control_point_x_4 = "12945";
						control_point_x_5 = "38836";
						control_point_x_6 = "116508";
						control_point_x_7 = "349525";
						control_point_x_8 = "1048576";
						control_point_y_0 = "0";
						control_point_y_1 = "480";
						control_point_y_2 = "840";
						control_point_y_3 = "1240";
						control_point_y_4 = "1696";
						control_point_y_5 = "2200";
						control_point_y_6 = "2764";
						control_point_y_7 = "3396";
						control_point_y_8 = "4096";
					};
				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						mipi_cam_out1: endpoint {
							port-index = <2>;
							bus-width = <4>;
							remote-endpoint = <&mipi_cam_csi_in1>;
						};
					};
				};
			};
		};
	};
};

/ {
	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <8>;
		max_lane_speed = <2500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <7500000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vendor.
		 */
		modules {
			module0 {
				badge = "imx390_front";
				position = "front";
				orientation = "1";
				drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "imx390 9-0020";
					proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/cam_0@20";
				};
			};
			module1 {
				badge = "imx390_rear";
				position = "rear";
				orientation = "1";
				drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "imx390 10-0020";
					proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/cam_1@20";
				};
			};
		};
	};
};
